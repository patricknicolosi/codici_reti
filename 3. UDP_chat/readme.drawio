<mxfile host="65bd71144e">
    <diagram id="9G4yRGe4iM5ukn1y3KQQ" name="Pagina-1">
        <mxGraphModel dx="886" dy="655" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
            <root>
                <mxCell id="0"/>
                <mxCell id="1" parent="0"/>
                <mxCell id="21" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;La sfida di avere una chat UDP Ã¨ quella di non rendere bloccanti&lt;br&gt;i recvfrom(), in una chat infatti non si attende di ricevere un pacchetto&lt;br&gt;prima di poter rispondere ma deve essere tutto &lt;b&gt;parallelizzabile.&lt;br&gt;&lt;/b&gt;&lt;br&gt;Possiamo sfruttare la parallelizzazione dei processi del sistema&lt;br&gt;operativo per implementare un comportamento del genere.&lt;br&gt;&lt;br&gt;Useremo la funzione &lt;i&gt;fork() &lt;/i&gt;per creare una copia di un processo. Distingueremo&lt;br&gt;un &lt;b&gt;processo padre&lt;/b&gt; ed un &lt;b&gt;processo figlio&lt;/b&gt;. I due processi non hanno nessun&amp;nbsp;&lt;br&gt;tipo di &quot;memoria condivisa&quot; tra di loro: per cui per far comunicare i due processi&amp;nbsp;&lt;br&gt;tra loro vengono usati &quot;stratagemmi&quot; come:&lt;br&gt;&lt;br&gt;- La comunicazione tramite un file di accesso comune ai due processi&lt;br&gt;- Primitive di manipolazione della memoria a basso livello&lt;br&gt;&lt;br&gt;&lt;/font&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="1">
                    <mxGeometry x="80" y="50" width="590" height="300" as="geometry"/>
                </mxCell>
            </root>
        </mxGraphModel>
    </diagram>
</mxfile>